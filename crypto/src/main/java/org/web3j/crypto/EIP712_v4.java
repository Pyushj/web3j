package org.example;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import org.web3j.crypto.StructuredDataEncoder;
import org.web3j.crypto.*;
import org.web3j.utils.Numeric;

public class EIP712_v4 {

    //parameters: json data as String,privateKey to sign the message
    //returns: EIP712 Sign as Hex String (matches with Signatures generated by Metamask libraries)
    public static String signTypedData(String jsonData,String privateKey)throws Exception
    {
        StructuredDataEncoder temp =new StructuredDataEncoder(jsonData);
        byte[] messageToSign=temp.hashStructuredData();

        Credentials credentials = Credentials.create(privateKey);
        Sign.SignatureData signature = Sign.signMessage(messageToSign, credentials.getEcKeyPair(),false);
        byte[] value = new byte[65];
        System.arraycopy(signature.getR(), 0, value, 0, 32);
        System.arraycopy(signature.getS(), 0, value, 32, 32);
        System.arraycopy(signature.getV(), 0, value, 64, 1);
        return  Numeric.toHexString(value);
    }

    //parameters: json data as  that was Signed ,EIP712 Signature of the typed data
    //returns: the '0x'-prefixed hex address of the signer
    public static String recoverTypedSignature(String jsonData,Sign.SignatureData signature)throws Exception
    {
        StructuredDataEncoder temp =new StructuredDataEncoder(jsonData);
        byte[] messageToSign=temp.hashStructuredData();

        BigInteger recovery=Sign.signedMessageHashToKey(messageToSign,signature);
        String address="0x"+Keys.getAddress(recovery);
        return address;
    }

}
